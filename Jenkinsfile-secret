// Pod Template
def cloud = env.CLOUD ?: "kubernetes"
def registryCredsID = env.REGISTRY_CREDENTIALS ?: "registry-creds"
def serviceAccount = env.SERVICE_ACCOUNT ?: "default"

// Pod Environment Variablesworkshop
def namespace = env.NAMESPACE ?: "default"
def registry = env.REGISTRY ?: "mycluster.icp:8500"
def releaseName = env.RELEASE_NAME ?: "liberty-starter"
def volumes = [ hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock') ]
volumes += [ hostPathVolume(hostPath: '/etc/docker/certs.d', mountPath: '/etc/docker/certs.d') ]
volumes += secretVolume(secretName: 'microclimate-registry-secret', mountPath: '/msb_reg_sec')
volumes += secretVolume(secretName: 'microclimate-helm-secret', mountPath: '/msb_helm_sec')

podTemplate(label: 'mypod', cloud: cloud, serviceAccount: serviceAccount, namespace: namespace, envVars: [
        envVar(key: 'NAMESPACE', value: namespace),
        envVar(key: 'REGISTRY', value: registry),
        envVar(key: 'RELEASE_NAME', value: releaseName)
    ],
    containers: [
        containerTemplate(name: 'maven', image: 'maven:3-alpine', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'kubectl', image: 'ibmcom/microclimate-utils:1901', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker' , image: 'docker:18.06.1-ce', ttyEnabled: true, command: 'cat')
   ],
   volumes: volumes
  ) 
  {
    node('mypod') {
        checkout scm
        container('maven') {
            stage('Build application war file') {
               sh """
               #!/bin/bash
               mvn -B -DskipTests clean package
               """
            }
        }
        container('docker') {
            stage('Build Docker Image') {
            def imageTag = ${env.REGISTRY}/${env.NAMESPACE}/liberty-starter:${env.BUILD_NUMBER}
            echo "imageTag ${imageTag}"
                sh """
                ln -s /msb_reg_sec/.dockercfg /home/jenkins/.dockercfg
                mkdir /home/jenkins/.docker
                ln -s /msb_reg_sec/.dockerconfigjson /home/jenkins/.docker/config.json
                docker build -t $imageTag .
                docker push $imageTag
                """
            }
          }
        }
        container('kubectl') {
            stage('Deploy new Docker Image') {
                sh """
                #!/bin/bash
                DEPLOYMENT=`kubectl --namespace=${env.NAMESPACE} get deployments -l app=liberty-starter,component=web-app,release=${env.RELEASE_NAME} -o name`
                kubectl --namespace=${env.NAMESPACE} get \${DEPLOYMENT}
                if [ \${?} -ne "0" ]; then
                    # No deployment to update
                    echo 'No deployment to update'
                    exit 1
                fi
                # Update Deployment
                kubectl --namespace=${env.NAMESPACE} set image \${DEPLOYMENT} ${env.RELEASE_NAME}-web=${env.REGISTRY}/${env.NAMESPACE}/liberty-starter:${env.BUILD_NUMBER}
                kubectl --namespace=${env.NAMESPACE} rollout status \${DEPLOYMENT}
                """
            }
        }
    }
}
